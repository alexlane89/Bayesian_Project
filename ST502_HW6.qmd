---
title: "ST502 HW6 - Bayesian Project"
author: "Charles Lane"
format: html
editor: visual
---

## Task 1 - Read-in Data

> Begin by reading in the diabetes data, which is included in this repository.

```{r}
d_data = read.csv('diabetes-dataset.csv')
head(d_data)
```

> Clean data to remove glucose readings of 0.

```{r}
d_data$Glucose[d_data$Glucose == 0] <- NA
d_data <- d_data[complete.cases(d_data),]
head(d_data)
```


> create a matrix to fill with iterated B0, B1 values.

```{r}
g_mat <- matrix(NA, nrow=6000,ncol = 2)
colnames(g_mat) <- c('Beta0','Beta1')
head(g_mat)
```
### Determine regression variables

> Write a function to create the log posterior values

```{r}
posterior = function(b0, b1, gluc, outcome){
  return(sum(log(dbinom(outcome, 1, 
                        exp(b0+b1*gluc)/(1+exp(b0+b1*gluc))))))
}
```

> Practice to help with troubleshooting and ensure function works

```{r}
b0 <- matrix(NA, nrow = 10 #nsample
             ,ncol = 1)
b1 <- matrix(NA, nrow = 10 #nsample
             , ncol = 1)
colnames(g_mat) <- c('Beta0','Beta1')
b0[1] <- 0.1 #initb0
b1[1] <- 0.1 #initb1

```

> Further practice including the for loop

```{r}
for(i in 2:10 #nsample
    ){
  #Determine candidate value for Beta0 'b0'
  #temporary value for current beta is previous beta
  currentb0 <- b0[i-1]
  
  #get the next random draw 
  newb0 <- currentb0 + rnorm(1, 0, 0.2#JSD
                             ^2)
  #Complete ln(R) to determine if b0 candidate is to be accepted
  ln_r_a <- (log(newb0) + log(b1[i-1]) + log(-posterior(b0=newb0, b1=b1[i-1], gluc = d_data$Glucose, 
                                              outcome = d_data$Outcome)))
  ln_r_b <- (log(b0[i-1]) + log(b1[i-1]) + log(-posterior(b0 = currentb0, b1 = b1[i-1], gluc = d_data$Glucose,
                                             outcome = d_data$Outcome)))
  ln_r <-  ln_r_a - ln_r_b
          
  #Determine if to accept b0.s value based on ln(r)
  if(log(runif(1)) < ln_r){
      b0[i] <- newb0      # accept move with probability min(1,r)
    } else {
      b0[i] <- currentb0  # otherwise "reject" move, and stay where we are
    } #end if's
  
  #Determine candidate value for Beta1 'b1'
  #temporary value for current beta is previous beta
    currentb1 <- b1[i-1]
    
    #get the next random draw 
    newb1 <- currentb1 + rnorm(1, 0, (0.2#JSD
                                      /10)^2)
  #Complete ln(R) to determine if b0 candidate is to be accepted
  ln_r <- (log(b0[i]) + log(newb1) + log(-posterior(b0=b0[i], b1=newb1, gluc = d_data$Glucose, 
                                              outcome = d_data$Outcome))) - 
          (log(b0[i]) + log(b1[i-1]) + log(-posterior(b0 = b0[i], b1 = b1[i-1], gluc = d_data$Glucose,
                                             outcome = d_data$Outcome)))
  #Determine if to accept b0.s value based on ln(r)
  if(log(runif(1)) < ln_r){
      b1[i] <- newb1      # accept move with probability min(1,r)
    } else {
      b1[i] <- currentb1  # otherwise "reject" move, and stay where we are
    } #end if's
}

x <- data.frame(b0, b1)
x
```

> Write a sampler function to draw 'nsample' posterior samples of beta0, beta1

```{r}
#b0 = Beta0 estimator
#b1 = Beta1 estimator
#gluc = predictor 'x' value of glucose
#outcome = diabetes outcome (binary 0/1)
#nsample = number of posterior samples from distribution
#JSD = Jumping Distribution standard deviation
post_sample = function(initb0, initb1, gluc, outcome, nsample, JSD){
  b0 <- matrix(NA, nrow = nsample, ncol = 1)
  b1 <- matrix(NA, nrow = nsample, ncol = 1)
  b0[1] <- initb0
  b1[1] <- initb1
  for(i in 2:nsample){
  #Determine candidate value for Beta0 'b0'
  #temporary value for current beta is previous beta
    currentb0 <- b0[i-1]
    
    #get the next random draw 
    newb0 <- currentb0 + rnorm(1, 0, JSD^2)
  #Complete ln(R) to determine if b0 candidate is to be accepted
  ln_r <- (log(newb0) + log(b1[i-1]) + log(-posterior(b0=newb0, b1=b1[i-1], gluc = gluc, 
                                              outcome = outcome))) - 
          (log(b0[i-1]) + log(b1[i-1]) + log(-posterior(b0 = currentb0, b1 = b1[i-1], gluc = gluc,
                                             outcome = outcome)))
  #Determine if to accept b0.s value based on ln(r)
  if(log(runif(1)) < ln_r){
      b0[i] <- newb0      # accept move with probability min(1,r)
    } else {
      b0[i] <- currentb0  # otherwise "reject" move, and stay where we are
    } #end if's
  
  #Determine candidate value for Beta1 'b1'
  #temporary value for current beta is previous beta
    currentb1 <- b1[i-1]
    
    #get the next random draw 
    newb1 <- currentb1 + rnorm(1, 0, (JSD/10)^2)
  #Complete ln(R) to determine if b0 candidate is to be accepted
  ln_r <- (log(b0[i]) + log(newb1) + log(-posterior(b0=b0[i], b1=newb1, gluc = gluc, 
                                              outcome = outcome))) - 
          (log(b0[i]) + log(b1[i-1]) + log(-posterior(b0 = b0[i], b1 = b1[i-1], gluc = gluc,
                                             outcome = outcome)))
  #Determine if to accept b0.s value based on ln(r)
  if(log(runif(1)) < ln_r){
      b1[i] <- newb1      # accept move with probability min(1,r)
    } else {
      b1[i] <- currentb1  # otherwise "reject" move, and stay where we are
    } #end if's
  }
  return(data.frame(Beta0 = b0,Beta1 = b1))
}
```

> Run the sampler function with a sample size of 6000 and a 'burn-in' of 1000.

```{r}
result <- post_sample(initb0 = 0.1, initb1 = 0.1, gluc = d_data$Glucose,
                     outcome = d_data$Outcome, nsample = 10, JSD = 0.2)

```

> Identify a burnin in to reduce depdency on the first estimated values of b0 & b1,
> then calculate the mean and standard deviations for each Beta estimator from their
> generated distributions.

```{r}
burnin <- 2

m <- c(mean(result$Beta0[-c(1:burnin)]), mean(result$Beta1[-c(1:burnin)]))
s <- c(sd(result$Beta0[-c(1:burnin)]), sd(result$Beta1[-c(1:burnin)]))

data.frame('Posterior Mean' = m, 'Posterior SD' = s, row.names = c('Beta0', 'Beta1'))
```
> Determine the equal tail credible interval for the above 2 Beta posterior distributions

```{r}
# Equal tail intervals using quantiles for Beta0
quantile(c(0.025, 0.975), x = result$Beta0[-c(1:burnin)])
```

```{r}
# Equal tail intervals using quantiles for Beta1
quantile(c(0.025, 0.975), x = result$Beta1[-c(1:burnin)])
```

## Task 2 - Using MCMCpack R package

```{r}
library('coda')
library('MASS')
library('MCMCpack')

```

> Use the MCMClogit function in the MCMCpack package to perform the Bayesian
analysis outlined in Task 1.

```{r}
post = MCMClogit(d_data$Outcome ~ d_data$Glucose, seed=30, burnin = 1000, mcmc=5000,
b0 = 0, B0 = 1, data= d_data)
colnames(post) <- c('Beta0', 'Beta1')

head(post)
```

> Plots of the above

```{r}
plot(post)
```

> Generate summary statistics

```{r}
summary(post)
```

> Now make it a dataframe!

```{r}
post = data.frame(post)
```

# What are the differences between the results of Task 1 & Task 2?
> In Task 1 - 
> In Task 2 - 

> Predict Diabetes status based on the calculated posterior B0 & B1 values, 
then plot against the reported diabetes status values.

```{r}
comparison <- data.frame(
  'Glucose' = d_data$Glucose,
  'Predicted Value' = posterior(b0 = mean(post$Beta0),b1 = mean(post$Beta1), gluc = d_data$Glucose, outcome = d_data$Outcome),
  'Actual Value' = d_data$Outcome)

head(comparison)
```

